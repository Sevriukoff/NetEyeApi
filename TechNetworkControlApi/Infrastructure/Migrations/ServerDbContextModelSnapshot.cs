// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TechNetworkControlApi.Infrastructure;

#nullable disable

namespace TechNetworkControlApi.Infrastructure.Migrations
{
    [DbContext(typeof(ServerDbContext))]
    partial class ServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.RepairRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TechEquipmentId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("UserFromId")
                        .HasColumnType("int");

                    b.Property<int?>("UserToId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TechEquipmentId");

                    b.HasIndex("UserFromId");

                    b.HasIndex("UserToId");

                    b.ToTable("RepairRequests");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.TechEquipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TechEquipments");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.TechEquipmentTechSoft", b =>
                {
                    b.Property<string>("TechEquipmentId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("TechSoftId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InstalledDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TechEquipmentId", "TechSoftId");

                    b.HasIndex("TechSoftId");

                    b.ToTable("TechEquipmentTechSoft");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.TechSoft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("TechSofts");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.RepairRequest", b =>
                {
                    b.HasOne("TechNetworkControlApi.Infrastructure.Entities.TechEquipment", "TechEquipment")
                        .WithMany()
                        .HasForeignKey("TechEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNetworkControlApi.Infrastructure.Entities.User", "UserFrom")
                        .WithMany("RepairRequestsSubmitted")
                        .HasForeignKey("UserFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNetworkControlApi.Infrastructure.Entities.User", "UserTo")
                        .WithMany("RepairRequestsReceived")
                        .HasForeignKey("UserToId");

                    b.Navigation("TechEquipment");

                    b.Navigation("UserFrom");

                    b.Navigation("UserTo");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.TechEquipmentTechSoft", b =>
                {
                    b.HasOne("TechNetworkControlApi.Infrastructure.Entities.TechEquipment", "TechEquipment")
                        .WithMany("Softs")
                        .HasForeignKey("TechEquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TechNetworkControlApi.Infrastructure.Entities.TechSoft", "TechSoft")
                        .WithMany("TechEquipments")
                        .HasForeignKey("TechSoftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TechEquipment");

                    b.Navigation("TechSoft");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.TechEquipment", b =>
                {
                    b.Navigation("Softs");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.TechSoft", b =>
                {
                    b.Navigation("TechEquipments");
                });

            modelBuilder.Entity("TechNetworkControlApi.Infrastructure.Entities.User", b =>
                {
                    b.Navigation("RepairRequestsReceived");

                    b.Navigation("RepairRequestsSubmitted");
                });
#pragma warning restore 612, 618
        }
    }
}
